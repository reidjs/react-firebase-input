{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["FirebaseForm","props","callback","otherProps","Object","e","obj","child","refkey","value","record","dbRef","err","FirebaseInput","useState","handleChange","Error","handleCheckboxChange","handleRadioChange","updateDatabase","snapshot","val","setChecked","useEffect","setValue","refKey","checked","App","setDbRef","db","setDb","dbRefString","setDbRefString","localStorage","getItem","config","setConfig","setRefKey","setError","inputError","setInputError","success","setSuccess","newRecordResult","setNewRecordResult","updateRecordResult","setUpdateRecordResult","name","setName","email","setEmail","updateConfigSecrets","a","target","handleInputError","msg","message","updateDbRef","preventDefault","c","JSON","parse","firebase","initializeApp","t","database","ref","r","setItem","style","padding","href","placeholder","rows","cols","onChange","color","marginBottom","border","background","onClick","display","flexWrap","type","min","max","res","console","log","newRecord","margin","height","ReactDOM","render","document","getElementById"],"mappings":"0TAEaA,EAAgBC,IAAU,IAI/B,EAAN,EAAM,QAAN,EAAM,UAAoBC,EAA1B,EAA0BA,SAyCpBC,EAAaC,iBAAnB,GAMA,cALOD,EAAP,gBACOA,EAAP,aACOA,EAAP,iBACOA,EAAP,SAGE,sDAAgCF,YA7CZI,KACpBA,mBACA,IAAMC,EAAN,GAUA,GATAL,mBAAuBM,IACrB,GAAIA,GAASA,EAAb,MAA0B,CACxB,IAAMC,EAASD,QAAf,OACA,KAAY,CACV,IAAME,EAAQF,QAAd,MACAD,WAIN,EAAe,CACb,IAAMI,EAASC,EAAf,OACAD,cACQ,KACJ,GACER,EAASQ,EAATR,OAHNQ,MAKUE,IACN,GACEV,YAGNS,iBACQ,KACJ,GACET,MAHNS,MAMUC,IACN,GACEV,WAcLD,EAFL,WAOWY,EAAiBZ,IAAU,MACZa,mBAA1B,IADsC,mBAChC,EADgC,KAChC,EADgC,OAERA,mBAA9B,IAFsC,mBAEhC,EAFgC,KAEhC,EAFgC,KAIhC,EAAN,EAAM,QAAN,EAAM,OAAiBZ,EAAvB,EAAuBA,SAEjBa,EAAeV,IACnB,MACE,MAAMW,MAAN,yBAEF,MACE,MAAMA,MAAN,oBAEF,OAAQf,EAAR,MACE,eAEE,YADAgB,IAEF,YAEE,YADAC,EAAkBb,SAAlBa,OAEF,QACEC,EAAed,SAAfc,SAIAA,EAAiBV,IACrB,IAAMH,EAAN,GACAA,OACAK,iBACQ,KACJ,GACET,MAHNS,MAMUC,IACN,GACEV,QAKFe,EAAuBR,IAC3B,IAAMH,EAAN,GAEAK,qBAAyBS,IACnBA,EAAJ,YAEE,IADYA,EAAZ,MACIC,IACFf,QACAgB,QAEAhB,QACAgB,OAEFX,iBACQ,KACJ,GACET,MAHNS,MAMUC,IACN,GACEV,WAMNgB,EAAoBT,IACxB,IAAMH,EAAN,GAEAK,qBAAyBS,IACnBA,EAAJ,WACcA,EAAZ,MACIC,KAAJ,EACEf,QAEAA,OAEFK,iBACQ,KACJ,GACET,MAHNS,MAMUC,IACN,GACEV,WAONC,EAAaC,iBAAnB,GA2CA,cA1COD,EAAP,aACOA,EAAP,cACOA,EAAP,SAEAoB,oBAAU,KACHZ,GAAL,IAGA,aAAIV,OACFU,qBAA0BS,IAEtB,MADEA,EAAJ,WAEMA,SAAkBA,QAAtB,KACEC,EAAMD,QAANC,IAEFC,KAAWD,MAGV,UAAIpB,OACTU,aAAkBS,IAEd,MADEA,EAAJ,WAEMA,SAAkBA,QAAtB,KACEC,EAAMD,QAANC,IAEFC,EAAWD,IAAQpB,EAAnBqB,UAIJX,aAAkBS,IAGd,MAFEA,EAAJ,WAGMA,SAAkBA,QAAtB,KACEC,EAAMD,QAANC,IAEFG,UAIL,CAACb,EApCJY,IAsCA,aAAItB,OAEA,qDAAoBc,GAApB,YAA4Dd,aAAoBU,IAAUc,KAEvF,aAAIxB,QAIJ,UAAIA,OAFP,kDAAiBc,GAAjB,YAAyDd,aAAoBU,IAA7E,UAAyGe,KAQzG,0DAAsCjB,GAAtC,YAAuER,aAAoBU,IAAUc,MCkB5FE,G,MAtNH,KAAM,MAGUb,mBAAS,MAHnB,mBAGTH,EAHS,KAGFiB,EAHE,OAIId,mBAAS,MAJb,mBAITe,EAJS,KAILC,EAJK,OAKsBhB,mBAAS,KAL/B,mBAKTiB,EALS,KAKIC,EALJ,OAMYlB,mBAASmB,aAAaC,QAAQ,WAAa,IANvD,mBAMTC,EANS,KAMDC,EANC,OAOYtB,mBAAS,IAPrB,mBAOTW,EAPS,KAODY,EAPC,OAQQvB,mBAAS,IARjB,mBAQTF,EARS,KAQJ0B,EARI,OASoBxB,mBAAS,IAT7B,mBASTyB,EATS,KASGC,EATH,OAUc1B,mBAAS,IAVvB,mBAUT2B,EAVS,KAUAC,EAVA,OAW8B5B,mBAAS,IAXvC,mBAWT6B,EAXS,KAWQC,EAXR,OAYoC9B,mBAAS,IAZ7C,mBAYT+B,EAZS,KAYWC,EAZX,OAeQhC,mBAAS,IAfjB,mBAeTiC,EAfS,KAeHC,EAfG,OAgBUlC,mBAAS,IAhBnB,mBAgBTmC,GAhBS,KAgBFC,GAhBE,KAkBVC,GAAmB,uCAAG,WAAM9C,GAAN,SAAA+C,EAAA,sDAC1Bd,EAAS,IACTI,EAAW,IACXN,EAAU/B,EAAEgD,OAAO5C,OAHO,2CAAH,sDAYnB6C,GAAmB1C,IACvB,IAAI2C,EAAM3C,EACNA,GAAOA,EAAI4C,UACbD,EAAM3C,EAAI4C,SAEZhB,EAAce,IAsBVE,GAAW,uCAAG,WAAOpD,GAAP,mBAAA+C,EAAA,yDACd/C,GACFA,EAAEqD,iBAFc,SAIVC,EAAIC,KAAKC,MAAM1B,GAChBN,EALW,iCAMRiC,IAASC,cAAcJ,GANf,OAORK,EAAIF,IAASG,WACnBnC,EAAMkC,GACNpC,EAASoC,EAAEE,IAAInC,IATD,wBAWRoC,EAAItC,EAAGqC,IAAInC,GACjBH,EAASuC,GAZK,QAchBzB,EAAW,YAdK,kDAgBhBJ,EAAS,KAAIkB,SAhBG,0DAAH,sDA0BjB,OAPAjC,oBAAU,KACJY,IACFF,aAAamC,QAAQ,SAAUjC,GAC/BsB,OAED,CAACtB,IAGF,yBAAKkC,MAAO,CAAEC,QAAS,cACrB,uBAAGC,KAAK,kDAAR,eACA,8BACE,+CACA,sFACA,qEACA,6BACA,8BAAUC,YAAarC,GArGZ,gTAqGqCsC,KAAK,KAAKC,KAAK,KAAKC,SAAUxB,KAE9E,kDACA,2BAAOwB,SAvEatE,IACxB2B,EAAe3B,EAAEgD,OAAO5C,QAsEgBA,MAAOsB,IAC3C,wBAAIsC,MAAO,CAAEO,MAAQnD,EAAS,GAAK,MAAQoD,aAAc,MAAzD,iBACA,mEACA,6BACA,2BAAOF,SAxEWtE,IACtBgC,EAAUhC,EAAEgD,OAAO5C,QAuEmB4D,MAAO,CAAES,OAAQrD,EAAS,GAAK,iBAAmBhB,MAAOgB,IAC3F,6BACA,6BACA,oDACA,4BAAQ4C,MAAO,CAAEU,WAAY,QAASH,MAAO,QAASN,QAAS,QAAUU,QAASvB,IAAlF,UAEA,uBAAGY,MAAO,CAAEO,MAAO,QAAUhE,GAC7B,uBAAGyD,MAAO,CAAEO,MAAO,UAAYnC,IAEjC,6BACA,0CACA,yBAAK4B,MAAO,CAACO,MAAO,QAASrC,GAC7B,yBAAK8B,MAAO,CAAEY,QAAS,OAAQC,SAAU,SACvC,4BACE,2CACA,4BACE,6CAEA,kBAACrE,EAAD,CAAeX,SAAUoD,GAAkB3C,MAAOA,EAAOc,OAAQA,EAAQ+C,YAAY,qBAGvF,4BACE,2DACA,kBAAC3D,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,QAAQxE,MAAOA,EAAOc,OAAQA,EAAQ+C,YAAY,qBAEpG,4BACE,8DACA,kBAAC3D,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,WAAWxE,MAAOA,EAAOc,OAAQA,EAAQ+C,YAAY,qBAEvG,4BACE,yDACA,kBAAC3D,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,MAAMxE,MAAOA,EAAOc,OAAQA,EAAQ+C,YAAY,sBAGpG,4BACE,4CACA,4BACE,8DACA,6BACE,kBAAC3D,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,WAAWxE,MAAOA,EAAOc,OAAQA,EAAQ+C,YAAY,oBACrG,oEAGJ,4BACE,2DACA,sFACA,4BACE,6BACE,kBAAC3D,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,QAAQxE,MAAOA,EAAOc,OAAQA,EAAQhB,MAAM,SAC5F,uCAEF,6BACE,kBAACI,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,QAAQxE,MAAOA,EAAOc,OAAQA,EAAQhB,MAAM,SAC5F,uCAEF,6BACE,kBAACI,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,QAAQxE,MAAOA,EAAOc,OAAQA,EAAQhB,MAAM,YAC5F,4CAIN,4BACE,8DACA,6BACE,kBAACI,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,WAAWxE,MAAOA,EAAOc,OAAQA,MAGrF,4BACE,2DACA,6BACE,kBAACZ,EAAD,CAAeX,SAAUoD,GAAkB6B,KAAK,QAAQxE,MAAOA,EAAOc,OAAQA,EAAQ2D,IAAI,IAAIC,IAAI,WAIxG,4BACE,qCACA,4CACA,wBAAIhB,MAAO,CAAEY,QAAS,gBAAiBC,SAAU,SAC/C,6BACE,kBAAClF,EAAD,CAAcE,SA3ICoF,IACzBC,QAAQC,IAAI,MAAOF,GACnB,IAAI/B,EAAM+B,EACNA,GAAOA,EAAI9B,UACbD,EAAM+B,EAAI9B,SAEZZ,EAAmBW,IAqIkCc,MAAO,CAAES,OAAQ,kBAAmBR,QAAS,QAAUmB,WAAW,EAAM9E,MAAOA,GACxH,0DACA,4BACA,qCACA,2BAAOgE,SAAWtE,GAAM2C,EAAQ3C,EAAEgD,OAAO5C,OAAQA,MAAOsC,EAAMvC,OAAO,SACrE,yBAAK6D,MAAO,CAAEqB,OAAQ,YACtB,sCACA,2BAAOf,SAAWtE,GAAM6C,GAAS7C,EAAEgD,OAAO5C,OAAQA,MAAOwC,GAAOzC,OAAO,QAAQ2E,KAAK,UACpF,4BACA,0CACA,yBAAKd,MAAO,CAACO,MAAO,QAASjC,KAGjC,6BACE,kBAAC3C,EAAD,CAAcE,SAhJIoF,IAC5BC,QAAQC,IAAI,MAAOF,GACnB,IAAI/B,EAAM+B,EACNA,GAAOA,EAAI9B,UACbD,EAAM+B,EAAI9B,SAEZ+B,QAAQC,IAAI,MAAOjC,GACnBT,EAAsBS,IAyIkCc,MAAO,CAAES,OAAQ,kBAAmBR,QAAS,QAAU3D,MAAOA,GAC1G,2DACA,4BACA,qCACA,2BAAOgE,SAAWtE,GAAM2C,EAAQ3C,EAAEgD,OAAO5C,OAAQA,MAAOsC,EAAMvC,OAAO,SACrE,yBAAK6D,MAAO,CAAEqB,OAAQ,YACtB,sCACA,2BAAOf,SAAWtE,GAAM6C,GAAS7C,EAAEgD,OAAO5C,OAAQA,MAAOwC,GAAOzC,OAAO,QAAQ2E,KAAK,UACpF,4BACA,0CACA,yBAAKd,MAAO,CAACO,MAAO,QAAS/B,QAMvC,yBAAKwB,MAAO,CAAEsB,OAAQ,cCxN5BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4fc65624.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport const FirebaseForm = (props) => {\n  // dbRef: required prop\n  // newRecord: optional boolean, pushes a new record and sets the form values instead of changes the existing one.\n  // callback: optional callback for newRecord success or error\n  const { dbRef, newRecord, callback } = props\n\n  // Each child needs a refkey (this is intentionally lowercase)\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const obj = {}\n    props.children.forEach(child => {\n      if (child && child.props) {\n        const refkey = child.props.refkey\n        if (refkey) {\n          const value = child.props.value\n          obj[refkey] = value\n        }\n      }\n    })\n    if (newRecord) {\n      const record = dbRef.push()\n      record.set(obj)\n        .then(() => {\n          if (callback)\n            callback(record.key)\n        })\n        .catch((err) => {\n          if (callback)\n            callback(err)\n        })\n    } else {\n      dbRef.update(obj)\n        .then(() => {\n          if (callback) {\n            callback()\n          }\n        })\n        .catch((err) => {\n          if (callback) {\n            callback(err)\n          }\n        })\n    }\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.onSubmit\n  delete otherProps.dbRef\n  delete otherProps.newRecord\n  delete otherProps.callback\n\n  return (\n    <form {...otherProps} onSubmit={props.onSubmit || handleSubmit}>\n      {props.children}\n    </form>\n  )\n}\n\nexport const FirebaseInput = (props) => {\n  const [value, setValue] = useState('')\n  const [checked, setChecked] = useState('')\n  // callback: optionally calls with result of update\n  const { dbRef, refKey, callback } = props\n\n  const handleChange = e => {\n    if (!dbRef) {\n      throw Error('no database reference')\n    }\n    if (!refKey) {\n      throw Error('no reference key')\n    }\n    switch (props.type) {\n      case 'checkbox':\n        handleCheckboxChange(e.target.value)\n        return\n      case 'radio':\n        handleRadioChange(e.target.value)\n        return\n      default:\n        updateDatabase(e.target.value)\n    }\n  }\n\n  const updateDatabase = value => {\n    const obj = {}\n    obj[refKey] = value\n    dbRef.update(obj)\n      .then(() => {\n        if (callback) {\n          callback()\n        }\n      })\n      .catch((err) => {\n        if (callback) {\n          callback(err)\n        }\n      })\n  }\n\n  const handleCheckboxChange = value => {\n    const obj = {}\n\n    dbRef.once('value').then(snapshot => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === true) {\n          obj[refKey] = false\n          setChecked(false)\n        } else {\n          obj[refKey] = true\n          setChecked(true)\n        }\n        dbRef.update(obj)\n          .then(() => {\n            if (callback) {\n              callback()\n            }\n          })\n          .catch((err) => {\n            if (callback) {\n              callback(err)\n            }\n          })\n      }\n    })\n  }\n  const handleRadioChange = value => {\n    const obj = {}\n\n    dbRef.once('value').then(snapshot => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === value) {\n          obj[refKey] = ''\n        } else {\n          obj[refKey] = value\n        }\n        dbRef.update(obj)\n          .then(() => {\n            if (callback) {\n              callback()\n            }\n          })\n          .catch((err) => {\n            if (callback) {\n              callback(err)\n            }\n          })\n      }\n    })\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.dbRef\n  delete otherProps.refKey\n  delete otherProps.callback\n\n  useEffect(() => {\n    if (!dbRef || !refKey)\n      return\n\n    if (props.type === 'checkbox') {\n      dbRef.once('value').then((snapshot) => {\n        if (snapshot.exists()) {\n          let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            val = snapshot.val()[refKey]\n          }\n          setChecked(val == true)\n        }\n      })\n    } else if (props.type === 'radio') {\n      dbRef.on('value', snapshot => {\n        if (snapshot.exists()) {\n          let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            val = snapshot.val()[refKey]\n          }\n          setChecked(val === props.value)\n        }\n      })\n    } else {\n      dbRef.on('value', snapshot => {\n        if (snapshot.exists()) {\n          // console.log('snapshot.val()', snapshot.val())\n          let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            val = snapshot.val()[refKey]\n          }\n          setValue(val)\n        }\n      })\n    }\n  }, [dbRef, refKey])\n\n  if (props.type === 'textarea') {\n    return (\n      <textarea onChange={handleChange} {...otherProps} disabled={props.disabled || (!dbRef || !refKey)} />\n    )\n  } else if (props.type === 'checkbox') {\n    return (\n      <input onChange={handleChange} {...otherProps} disabled={props.disabled || (!dbRef || !refKey)} checked={checked}></input>\n    )\n  } else if (props.type === 'radio') {\n    return (\n      <input onChange={handleChange} {...otherProps} disabled={props.disabled || (!dbRef || !refKey)} checked={checked}></input>\n    )\n  } else {\n    return (\n      <input onChange={handleChange} value={value} {...otherProps} disabled={props.disabled || (!dbRef || !refKey)}></input>\n    )\n  }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport firebase from 'firebase'\nimport { FirebaseInput, FirebaseForm } from 'react-firebase-input'\nimport 'react-firebase-input/dist/index.css'\n\nconst exampleConfig = `{\n  \"apiKey\": \"YOURAPIKEY\",\n  \"authDomain\": \"PROJECTID.firebaseapp.com\",\n  \"databaseURL\": \"https://PROJECTID.firebaseio.com\",\n  \"projectId\": \"PROJECTID\",\n  \"storageBucket\": \"PROJECTID.appspot.com\",\n  \"messagingSenderId\": \"873011175747\",\n  \"appId\": \"1:873011175747:web:a7066a6062c881d3bb4ff6\"\n}`\n// const instance = firebase.initializeApp(firebaseConfig);\nconst App = () => {\n  // let instance\n  // let db\n  const [dbRef, setDbRef] = useState(null)\n  const [db, setDb] = useState(null)\n  const [dbRefString, setDbRefString] = useState('/')\n  const [config, setConfig] = useState(localStorage.getItem('config') || '')\n  const [refKey, setRefKey] = useState('')\n  const [err, setError] = useState('')\n  const [inputError, setInputError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [newRecordResult, setNewRecordResult] = useState('')\n  const [updateRecordResult, setUpdateRecordResult] = useState('')\n\n  // FirebaseForm specific\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  // const [radioInput, setRadioInput] = useState('')\n  const updateConfigSecrets = async e => {\n    setError('')\n    setSuccess('')\n    setConfig(e.target.value)\n  }\n  const handleDbRefChange = e => {\n    setDbRefString(e.target.value)\n  }\n  const handleKeyChange = e => {\n    setRefKey(e.target.value)\n  }\n\n  const handleInputError = err => {\n    let msg = err\n    if (err && err.message) {\n      msg = err.message\n    }\n    setInputError(msg)\n  }\n\n  const newRecordCallback = (res) => {\n    console.log('res', res)\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    setNewRecordResult(msg)\n  }\n\n  const updateRecordCallback = (res) => {\n    console.log('res', res)\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    console.log('msg', msg)\n    setUpdateRecordResult(msg)\n  }\n\n  const updateDbRef = async (e) => {\n    if (e)\n      e.preventDefault()\n    try {\n      const c = JSON.parse(config)\n      if (!db) {\n        await firebase.initializeApp(c);\n        const t = firebase.database()\n        setDb(t)\n        setDbRef(t.ref(dbRefString))\n      } else {\n        const r = db.ref(dbRefString)\n        setDbRef(r)\n      }\n      setSuccess('Success.')\n    } catch (err) {\n      setError(err.message)\n    }\n  }\n  useEffect(() => {\n    if (config) {\n      localStorage.setItem('config', config)\n      updateDbRef()\n    }\n  }, [config])\n\n  return (\n    <div style={{ padding: \"10px 30px\" }}>\n      <a href=\"https://github.com/reidjs/react-firebase-input\">Github Repo</a>\n      <form>\n        <h1>Firebase Config</h1>\n        <h3>Paste your Firebase Realtime Database config JSON here</h3>\n        <small>This will be saved in localStorage</small>\n        <br />\n        <textarea placeholder={config || exampleConfig} rows=\"15\" cols=\"40\" onChange={updateConfigSecrets}>\n        </textarea>\n        <h3>Database Reference</h3>\n        <input onChange={handleDbRefChange} value={dbRefString}></input>\n        <h3 style={{ color: (refKey ? '' : 'red'), marginBottom: '0' }}>Reference Key</h3>\n        <small>(Not necessary for FirebaseForm)</small>\n        <h3 />\n        <input onChange={handleKeyChange} style={{ border: refKey ? '' : '1px solid red' }} value={refKey}></input>\n        <br />\n        <br />\n        <h3>Update Configuration</h3>\n        <button style={{ background: 'green', color: 'white', padding: '10px' }} onClick={updateDbRef}>Submit</button>\n\n        <p style={{ color: 'red' }}>{err}</p>\n        <p style={{ color: 'green' }}>{success}</p>\n      </form>\n      <hr />\n      <h1>Components</h1>\n      <div style={{color: 'red'}}>{inputError}</div>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <ul>\n          <h2>Text Inputs</h2>\n          <li>\n            <h3>FirebaseInput</h3>\n            {/* <button onClick={submitConfig}>submit configuration</button> */}\n            <FirebaseInput callback={handleInputError} dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n            \n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"email\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"email\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"password\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"password\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"tel\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"tel\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n        </ul>\n        <ul>\n          <h2>Other Inputs</h2>\n          <li>\n            <h3>FirebaseInput[type=\"checkbox\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"checkbox\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n              <span>Sets the reference true or false</span>\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"radio\"]</h3>\n            <small>Sets the reference to the value of the radio button</small>\n            <ul>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"cats\" />\n                <span>Cats</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"dogs\" />\n                <span>Dogs</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"lizards\" />\n                <span>Lizards</span>\n              </div>\n            </ul>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"textarea\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"textarea\" dbRef={dbRef} refKey={refKey} />\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"range\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"range\" dbRef={dbRef} refKey={refKey} min=\"0\" max=\"100\" />\n            </div>\n          </li>\n        </ul>\n        <ul>\n          <h2>Forms</h2>\n          <h3>FirebaseForm</h3>\n          <li style={{ display: 'flex flex-col', flexWrap: 'wrap' }}>\n            <div>\n              <FirebaseForm callback={newRecordCallback} style={{ border: '1px solid black', padding: '15px' }} newRecord={true} dbRef={dbRef}>\n                <div>Example Form (New Record)</div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <button>Submit</button>\n                <div style={{color: 'red'}}>{newRecordResult}</div>\n              </FirebaseForm>\n            </div>\n            <div>\n              <FirebaseForm callback={updateRecordCallback} style={{ border: '1px solid black', padding: '15px' }} dbRef={dbRef}>\n                <div>Example Form (Edit Record)</div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <button>Submit</button>\n                <div style={{color: 'red'}}>{updateRecordResult}</div>\n              </FirebaseForm>\n            </div>\n          </li>\n        </ul>\n      </div>\n      <div style={{ height: \"100px\" }}>\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}