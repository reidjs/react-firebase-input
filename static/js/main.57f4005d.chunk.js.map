{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["FirebaseForm","props","dbRef","newRecord","callback","otherProps","Object","onSubmit","e","obj","child","refkey","value","record","FirebaseInput","useState","setValue","checked","setChecked","refKey","handleChange","Error","handleCheckboxChange","handleRadioChange","updateDatabase","snapshot","val","useEffect","onChange","disabled","App","setDbRef","db","setDb","dbRefString","setDbRefString","localStorage","getItem","config","setConfig","setRefKey","err","setError","inputError","setInputError","success","setSuccess","newRecordResult","setNewRecordResult","updateRecordResult","setUpdateRecordResult","name","setName","email","setEmail","updateConfigSecrets","a","target","handleInputError","msg","message","updateDbRef","useCallback","preventDefault","c","JSON","parse","firebase","initializeApp","t","database","ref","r","setItem","style","padding","href","placeholder","rows","cols","color","marginBottom","border","background","onClick","display","flexWrap","type","min","max","res","console","log","margin","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57f4005d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport const FirebaseForm = (props) => {\n  // dbRef: required prop\n  // newRecord: optional boolean, pushes a new record and sets the form values instead of changes the existing one.\n  // callback: optional callback for newRecord success or error\n  const { dbRef, newRecord, callback } = props\n\n  // Each child needs a refkey (this is intentionally lowercase)\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const obj = {}\n    props.children.forEach((child) => {\n      if (child && child.props) {\n        const refkey = child.props.refkey\n        if (refkey) {\n          const value = child.props.value\n          obj[refkey] = value\n        }\n      }\n    })\n    if (newRecord) {\n      const record = dbRef.push()\n      record\n        .set(obj)\n        .then(() => {\n          if (callback) callback(record.key)\n        })\n        .catch((err) => {\n          if (callback) callback(err)\n        })\n    } else {\n      dbRef\n        .update(obj)\n        .then(() => {\n          if (callback) {\n            callback()\n          }\n        })\n        .catch((err) => {\n          if (callback) {\n            callback(err)\n          }\n        })\n    }\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.onSubmit\n  delete otherProps.dbRef\n  delete otherProps.newRecord\n  delete otherProps.callback\n\n  return (\n    <form {...otherProps} onSubmit={props.onSubmit || handleSubmit}>\n      {props.children}\n    </form>\n  )\n}\n\nexport const FirebaseInput = (props) => {\n  const [value, setValue] = useState('')\n  const [checked, setChecked] = useState(false)\n  // callback: optionally calls with result of update\n  const { dbRef, refKey, callback } = props\n\n  const handleChange = (e) => {\n    if (!dbRef) {\n      throw Error('no database reference')\n    }\n    if (!refKey) {\n      throw Error('no reference key')\n    }\n    switch (props.type) {\n      case 'checkbox':\n        handleCheckboxChange(e.target.value)\n        return\n      case 'radio':\n        handleRadioChange(e.target.value)\n        return\n      default:\n        updateDatabase(e.target.value)\n    }\n  }\n\n  const updateDatabase = (value) => {\n    const obj = {}\n    obj[refKey] = value\n    dbRef\n      .update(obj)\n      .then(() => {\n        if (callback) {\n          callback()\n        }\n      })\n      .catch((err) => {\n        if (callback) {\n          callback(err)\n        }\n      })\n  }\n\n  const handleCheckboxChange = (value) => {\n    const obj = {}\n\n    dbRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === true) {\n          obj[refKey] = false\n          setChecked(false)\n        } else {\n          obj[refKey] = true\n          setChecked(true)\n        }\n        dbRef\n          .update(obj)\n          .then(() => {\n            if (callback) {\n              callback()\n            }\n          })\n          .catch((err) => {\n            if (callback) {\n              callback(err)\n            }\n          })\n      }\n    })\n  }\n  const handleRadioChange = (value) => {\n    const obj = {}\n\n    dbRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === value) {\n          obj[refKey] = ''\n        } else {\n          obj[refKey] = value\n        }\n        dbRef\n          .update(obj)\n          .then(() => {\n            if (callback) {\n              callback()\n            }\n          })\n          .catch((err) => {\n            if (callback) {\n              callback(err)\n            }\n          })\n      }\n    })\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.dbRef\n  delete otherProps.refKey\n  delete otherProps.callback\n\n  useEffect(() => {\n    if (!dbRef || !refKey) return\n\n    if (props.type === 'checkbox') {\n      dbRef.once('value').then((snapshot) => {\n        if (snapshot.exists()) {\n          // let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            const val = snapshot.val()[refKey]\n            // eslint-disable-next-line\n            setChecked(val == true)\n          }\n        }\n      })\n    } else if (props.type === 'radio') {\n      dbRef.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          // let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            const val = snapshot.val()[refKey]\n            setChecked(val === props.value)\n          }\n        }\n      })\n    } else {\n      dbRef.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          // console.log('snapshot.val()', snapshot.val())\n          let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            val = snapshot.val()[refKey]\n          }\n          setValue(val)\n        }\n      })\n    }\n  }, [dbRef, refKey])\n\n  if (props.type === 'textarea') {\n    return (\n      <textarea\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n      />\n    )\n  } else if (props.type === 'checkbox') {\n    return (\n      <input\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n        checked={checked}\n      />\n    )\n  } else if (props.type === 'radio') {\n    return (\n      <input\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n        checked={checked}\n      />\n    )\n  } else {\n    return (\n      <input\n        onChange={handleChange}\n        value={value}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n      />\n    )\n  }\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport firebase from 'firebase'\nimport { FirebaseInput, FirebaseForm } from 'react-firebase-input'\nimport 'react-firebase-input/dist/index.css'\n\nconst exampleConfig = `{\n  \"apiKey\": \"YOURAPIKEY\",\n  \"authDomain\": \"PROJECTID.firebaseapp.com\",\n  \"databaseURL\": \"https://PROJECTID.firebaseio.com\",\n  \"projectId\": \"PROJECTID\",\n  \"storageBucket\": \"PROJECTID.appspot.com\",\n  \"messagingSenderId\": \"873011175747\",\n  \"appId\": \"1:873011175747:web:a7066a6062c881d3bb4ff6\"\n}`\n// const instance = firebase.initializeApp(firebaseConfig);\nconst App = () => {\n  // let instance\n  // let db\n  const [dbRef, setDbRef] = useState(null)\n  const [db, setDb] = useState(null)\n  const [dbRefString, setDbRefString] = useState('/')\n  const [config, setConfig] = useState(localStorage.getItem('config') || '')\n  const [refKey, setRefKey] = useState('')\n  const [err, setError] = useState('')\n  const [inputError, setInputError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [newRecordResult, setNewRecordResult] = useState('')\n  const [updateRecordResult, setUpdateRecordResult] = useState('')\n\n  // FirebaseForm specific\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  // const [radioInput, setRadioInput] = useState('')\n  const updateConfigSecrets = async e => {\n    setError('')\n    setSuccess('')\n    setConfig(e.target.value)\n  }\n  const handleDbRefChange = e => {\n    setDbRefString(e.target.value)\n  }\n  const handleKeyChange = e => {\n    setRefKey(e.target.value)\n  }\n\n  const handleInputError = err => {\n    let msg = err\n    if (err && err.message) {\n      msg = err.message\n    }\n    setInputError(msg)\n  }\n\n  const newRecordCallback = (res) => {\n    console.log('res', res)\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    setNewRecordResult(msg)\n  }\n\n  const updateRecordCallback = (res) => {\n    console.log('res', res)\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    console.log('msg', msg)\n    setUpdateRecordResult(msg)\n  }\n\n  const updateDbRef = useCallback(async (e) => {\n    if (e)\n      e.preventDefault()\n    try {\n      const c = JSON.parse(config)\n      if (!db) {\n        await firebase.initializeApp(c);\n        const t = firebase.database()\n        setDb(t)\n        setDbRef(t.ref(dbRefString))\n      } else {\n        const r = db.ref(dbRefString)\n        setDbRef(r)\n      }\n      setSuccess('Success.')\n    } catch (err) {\n      setError(err.message)\n    }\n  }, [config, db, dbRefString])\n  useEffect(() => {\n    if (config) {\n      localStorage.setItem('config', config)\n      updateDbRef()\n    }\n  }, [config, updateDbRef])\n\n  return (\n    <div style={{ padding: \"10px 30px\" }}>\n      <a href=\"https://github.com/reidjs/react-firebase-input\">Github Repo</a>\n      <form>\n        <h1>Firebase Config</h1>\n        <h3>Paste your Firebase Realtime Database config JSON here</h3>\n        <small>This will be saved in localStorage</small>\n        <br />\n        <textarea placeholder={config || exampleConfig} rows=\"15\" cols=\"40\" onChange={updateConfigSecrets}>\n        </textarea>\n        <h3>Database Reference</h3>\n        <input onChange={handleDbRefChange} value={dbRefString}></input>\n        <h3 style={{ color: (refKey ? '' : 'red'), marginBottom: '0' }}>Reference Key</h3>\n        <small>(Not necessary for FirebaseForm)</small>\n        <p />\n        <input onChange={handleKeyChange} style={{ border: refKey ? '' : '1px solid red' }} value={refKey}></input>\n        <br />\n        <br />\n        <h3>Update Configuration</h3>\n        <button style={{ background: 'green', color: 'white', padding: '10px' }} onClick={updateDbRef}>Submit</button>\n\n        <p style={{ color: 'red' }}>{err}</p>\n        <p style={{ color: 'green' }}>{success}</p>\n      </form>\n      <hr />\n      <h1>Components</h1>\n      <div style={{color: 'red'}}>{inputError}</div>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <ul>\n          <h2>Text Inputs</h2>\n          <li>\n            <h3>FirebaseInput</h3>\n            {/* <button onClick={submitConfig}>submit configuration</button> */}\n            <FirebaseInput callback={handleInputError} dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n            \n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"email\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"email\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"password\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"password\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"tel\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"tel\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n        </ul>\n        <ul>\n          <h2>Other Inputs</h2>\n          <li>\n            <h3>FirebaseInput[type=\"checkbox\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"checkbox\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n              <span>Sets the reference true or false</span>\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"radio\"]</h3>\n            <small>Sets the reference to the value of the radio button</small>\n            <ul>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"cats\" />\n                <span>Cats</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"dogs\" />\n                <span>Dogs</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"lizards\" />\n                <span>Lizards</span>\n              </div>\n            </ul>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"textarea\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"textarea\" dbRef={dbRef} refKey={refKey} />\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"range\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"range\" dbRef={dbRef} refKey={refKey} min=\"0\" max=\"100\" />\n            </div>\n          </li>\n        </ul>\n        <ul>\n          <h2>Forms</h2>\n          <h3>FirebaseForm</h3>\n          <li style={{ display: 'flex flex-col', flexWrap: 'wrap' }}>\n            <div>\n              <FirebaseForm callback={newRecordCallback} style={{ border: '1px solid black', padding: '15px' }} newRecord={true} dbRef={dbRef}>\n                <div>Example Form (New Record)</div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <button>Submit</button>\n                <div style={{color: 'red'}}>{newRecordResult}</div>\n              </FirebaseForm>\n            </div>\n            <div>\n              <FirebaseForm callback={updateRecordCallback} style={{ border: '1px solid black', padding: '15px' }} dbRef={dbRef}>\n                <div>Example Form (Edit Record)</div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <button>Submit</button>\n                <div style={{color: 'red'}}>{updateRecordResult}</div>\n              </FirebaseForm>\n            </div>\n          </li>\n        </ul>\n      </div>\n      <div style={{ height: \"100px\" }}>\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}