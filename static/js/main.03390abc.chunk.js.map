{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["allDescendantsWithRefKey","node","result","i","childNode","refkeyAttr","type","refkey","FirebaseForm","props","callback","ref","createRef","otherProps","Object","e","obj","record","dbRef","err","FirebaseInput","useState","handleChange","Error","handleCheckboxChange","handleRadioChange","updateDatabase","snapshot","val","setChecked","value","useEffect","setValue","refKey","checked","App","setDbRef","db","setDb","dbRefString","setDbRefString","localStorage","getItem","config","setConfig","setRefKey","setError","inputError","setInputError","success","setSuccess","newRecordResult","setNewRecordResult","updateRecordResult","setUpdateRecordResult","name","setName","email","setEmail","updateConfigSecrets","a","target","handleInputError","msg","message","updateDbRef","useCallback","preventDefault","c","JSON","parse","firebase","initializeApp","t","database","r","setItem","style","padding","href","placeholder","rows","cols","onChange","color","marginBottom","border","background","onClick","display","flexWrap","min","max","res","newRecord","margin","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03390abc.chunk.js","sourcesContent":["import React, { useState, useEffect, createRef } from 'react'\n\n// https://stackoverflow.com/questions/2712136/how-do-i-make-this-loop-all-children-recursively\nconst allDescendantsWithRefKey = (node, result = {}) => {\n  for (let i = 0; i < node.childNodes.length; i++) {\n    const childNode = node.childNodes[i];\n    allDescendantsWithRefKey(childNode, result);\n    if (childNode.getAttributeNode) {\n      const refkeyAttr = childNode.getAttributeNode('refkey')\n      const type = childNode.getAttributeNode('type')\n      if (refkeyAttr) {\n        const refkey = refkeyAttr.value\n        if (type && (type.value === 'checkbox' || type.value === 'radio')) {\n          if (type.value === 'checkbox') {\n            result[refkey] = childNode.checked\n          }\n          if (type.value === 'radio' && childNode.checked) {\n            result[refkey] = childNode.value\n          }\n        } else {\n          result[refkey] = childNode.value\n        }\n      }\n    }\n  }\n  return result\n}\n\nexport const FirebaseForm = props => {\n  // dbRef: required prop\n  // newRecord: optional boolean, pushes a new record and sets the form values instead of changes the existing one.\n  // callback: optional callback for newRecord success or error\n  const { dbRef, newRecord, callback } = props\n  const ref = createRef()\n  // Each child needs a refkey (this is intentionally lowercase)\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const obj = allDescendantsWithRefKey(ref.current)\n    if (newRecord) {\n      const record = dbRef.push()\n      record\n        .set(obj)\n        .then(() => {\n          if (callback) callback(null, record.key)\n        })\n        .catch((err) => {\n          if (callback) callback(err)\n        })\n    } else {\n      dbRef\n        .update(obj)\n        .then(() => {\n          if (callback) {\n            callback(null)\n          }\n        })\n        .catch((err) => {\n          if (callback) {\n            callback(err)\n          }\n        })\n    }\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.onSubmit\n  delete otherProps.dbRef\n  delete otherProps.newRecord\n  delete otherProps.callback\n\n  return (\n    <form {...otherProps} ref={ref} onSubmit={props.onSubmit || handleSubmit}>\n      {props.children}\n    </form>\n  )\n}\n\nexport const FirebaseInput = (props) => {\n  const [value, setValue] = useState('')\n  const [checked, setChecked] = useState(false)\n  // callback: optionally calls with result of update\n  const { dbRef, refKey, callback } = props\n\n  const handleChange = (e) => {\n    const obj = {}\n    if (!dbRef) {\n      throw Error('no database reference')\n    }\n    if (!refKey) {\n      throw Error('no reference key')\n    }\n    switch (props.type) {\n      case 'checkbox':\n        handleCheckboxChange()\n        return\n      case 'radio':\n        handleRadioChange(e.target.value)\n        return\n      default:\n        obj[refKey] = e.target.value\n        updateDatabase(obj)\n    }\n  }\n\n  const updateDatabase = (obj) => {\n    dbRef\n      .update(obj)\n      .then(() => {\n        if (callback) {\n          callback(null)\n        }\n      })\n      .catch((err) => {\n        if (callback) {\n          callback(err)\n        }\n      })\n  }\n\n  const handleCheckboxChange = () => {\n    const obj = {}\n\n    dbRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === true) {\n          obj[refKey] = false\n          setChecked(false)\n        } else {\n          obj[refKey] = true\n          setChecked(true)\n        }\n      } else {\n        // obj doesnt exist in DB, create it with the key whatever refKey is\n        obj[refKey] = checked\n      }\n      updateDatabase(obj)\n    })\n  }\n  const handleRadioChange = (value) => {\n    const obj = {}\n\n    dbRef.once('value').then((snapshot) => {\n      if (snapshot.exists()) {\n        const val = snapshot.val()\n        if (val[refKey] === value) {\n          obj[refKey] = ''\n        } else {\n          obj[refKey] = value\n        }\n      } else {\n        // object doesn't exist in DB, set it to the value of the radio input\n        if (checked) {\n          obj[refKey] = value\n        }\n      }\n      updateDatabase(obj)\n    })\n  }\n\n  const otherProps = Object.assign({}, props)\n  delete otherProps.dbRef\n  delete otherProps.refKey\n  delete otherProps.callback\n\n  useEffect(() => {\n    if (!dbRef || !refKey) return\n\n    if (props.type === 'checkbox') {\n      dbRef.once('value').then((snapshot) => {\n        if (snapshot.exists()) {\n          // let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            const val = snapshot.val()[refKey]\n            // eslint-disable-next-line\n            setChecked(val == true)\n          }\n        }\n      })\n    } else if (props.type === 'radio') {\n      dbRef.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          // let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            const val = snapshot.val()[refKey]\n            setChecked(val === props.value)\n          }\n        }\n      })\n    } else {\n      dbRef.on('value', (snapshot) => {\n        if (snapshot.exists()) {\n          let val\n          if (snapshot.val() && snapshot.val()[refKey]) {\n            val = snapshot.val()[refKey]\n          }\n          setValue(val)\n        }\n      })\n    }\n  }, [dbRef, refKey])\n\n  if (props.type === 'textarea') {\n    return (\n      <textarea\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n      />\n    )\n  } else if (props.type === 'checkbox') {\n    return (\n      <input\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n        checked={checked}\n      />\n    )\n  } else if (props.type === 'radio') {\n    return (\n      <input\n        onChange={handleChange}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n        checked={checked}\n      />\n    )\n  } else {\n    return (\n      <input\n        onChange={handleChange}\n        value={value}\n        {...otherProps}\n        disabled={props.disabled || !dbRef || !refKey}\n      />\n    )\n  }\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport firebase from 'firebase'\nimport { FirebaseInput, FirebaseForm } from 'react-firebase-input'\nimport 'react-firebase-input/dist/index.css'\n\nconst exampleConfig = `{\n  \"apiKey\": \"YOURAPIKEY\",\n  \"authDomain\": \"PROJECTID.firebaseapp.com\",\n  \"databaseURL\": \"https://PROJECTID.firebaseio.com\",\n  \"projectId\": \"PROJECTID\",\n  \"storageBucket\": \"PROJECTID.appspot.com\",\n  \"messagingSenderId\": \"873011175747\",\n  \"appId\": \"1:873011175747:web:a7066a6062c881d3bb4ff6\"\n}`\n// const instance = firebase.initializeApp(firebaseConfig);\nconst App = () => {\n  // let instance\n  // let db\n  const [dbRef, setDbRef] = useState(null)\n  const [db, setDb] = useState(null)\n  const [dbRefString, setDbRefString] = useState('/')\n  const [config, setConfig] = useState(localStorage.getItem('config') || '')\n  const [refKey, setRefKey] = useState('')\n  const [err, setError] = useState('')\n  const [inputError, setInputError] = useState('')\n  const [success, setSuccess] = useState('')\n  const [newRecordResult, setNewRecordResult] = useState('')\n  const [updateRecordResult, setUpdateRecordResult] = useState('')\n\n  // FirebaseForm specific\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  // const [radioInput, setRadioInput] = useState('')\n  const updateConfigSecrets = async e => {\n    setError('')\n    setSuccess('')\n    setConfig(e.target.value)\n  }\n  const handleDbRefChange = e => {\n    setDbRefString(e.target.value)\n  }\n  const handleKeyChange = e => {\n    setRefKey(e.target.value)\n  }\n\n  const handleInputError = err => {\n    let msg = err\n    if (err && err.message) {\n      msg = err.message\n    }\n    setInputError(msg)\n  }\n\n  const newRecordCallback = (res) => {\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    setNewRecordResult(msg)\n  }\n\n  const updateRecordCallback = (res) => {\n    let msg = res\n    if (res && res.message) {\n      msg = res.message\n    }\n    setUpdateRecordResult(msg)\n  }\n\n  const updateDbRef = useCallback(async (e) => {\n    if (e)\n      e.preventDefault()\n    try {\n      const c = JSON.parse(config)\n      if (!db) {\n        await firebase.initializeApp(c);\n        const t = firebase.database()\n        setDb(t)\n        setDbRef(t.ref(dbRefString))\n      } else {\n        const r = db.ref(dbRefString)\n        setDbRef(r)\n      }\n      setSuccess('Success.')\n    } catch (err) {\n      setError(err.message)\n    }\n  }, [config, db, dbRefString])\n  useEffect(() => {\n    if (config) {\n      localStorage.setItem('config', config)\n      updateDbRef()\n    }\n  }, [config, updateDbRef])\n\n  return (\n    <div style={{ padding: \"10px 30px\" }}>\n      <a href=\"https://github.com/reidjs/react-firebase-input\">Github Repo</a>\n      <form>\n        <h1>Firebase Config</h1>\n        <h3>Paste your Firebase Realtime Database config JSON here</h3>\n        <small>This will be saved in localStorage</small>\n        <br />\n        <textarea placeholder={config || exampleConfig} rows=\"15\" cols=\"40\" onChange={updateConfigSecrets}>\n        </textarea>\n        <h3>Database Reference</h3>\n        <input onChange={handleDbRefChange} value={dbRefString}></input>\n        <h3 style={{ color: (refKey ? '' : 'red'), marginBottom: '0' }}>Reference Key</h3>\n        <small>(Not necessary for FirebaseForm)</small>\n        <p />\n        <input onChange={handleKeyChange} style={{ border: refKey ? '' : '1px solid red' }} value={refKey}></input>\n        <br />\n        <br />\n        <h3>Update Configuration</h3>\n        <button style={{ background: 'green', color: 'white', padding: '10px' }} onClick={updateDbRef}>Submit</button>\n\n        <p style={{ color: 'red' }}>{err}</p>\n        <p style={{ color: 'green' }}>{success}</p>\n      </form>\n      <hr />\n      <h1>Components</h1>\n      <div style={{ color: 'red' }}>{inputError}</div>\n      <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n        <ul>\n          <h2>Text Inputs</h2>\n          <li>\n            <h3>FirebaseInput</h3>\n            {/* <button onClick={submitConfig}>submit configuration</button> */}\n            <FirebaseInput callback={handleInputError} dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"email\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"email\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"password\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"password\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"tel\"]</h3>\n            <FirebaseInput callback={handleInputError} type=\"tel\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n          </li>\n        </ul>\n        <ul>\n          <h2>Other Inputs</h2>\n          <li>\n            <h3>FirebaseInput[type=\"checkbox\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"checkbox\" dbRef={dbRef} refKey={refKey} placeholder=\"Edit text here!\" />\n              <span>Sets the reference true or false</span>\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"radio\"]</h3>\n            <small>Sets the reference to the value of the radio button</small>\n            <ul>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"cats\" />\n                <span>Cats</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"dogs\" />\n                <span>Dogs</span>\n              </div>\n              <div>\n                <FirebaseInput callback={handleInputError} type=\"radio\" dbRef={dbRef} refKey={refKey} value=\"lizards\" />\n                <span>Lizards</span>\n              </div>\n            </ul>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"textarea\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"textarea\" dbRef={dbRef} refKey={refKey} />\n            </div>\n          </li>\n          <li>\n            <h3>FirebaseInput[type=\"range\"]</h3>\n            <div>\n              <FirebaseInput callback={handleInputError} type=\"range\" dbRef={dbRef} refKey={refKey} min=\"0\" max=\"100\" />\n            </div>\n          </li>\n        </ul>\n        <ul>\n          <h2>Forms</h2>\n          <h3>FirebaseForm</h3>\n          <li style={{ display: 'flex flex-col', marginBottom: '10px', flexWrap: 'wrap' }}>\n            <div>\n              <FirebaseForm callback={newRecordCallback} style={{ border: '1px solid black', padding: '15px' }} newRecord={true} dbRef={dbRef}>\n                <div>Example Form <span style={{ color: 'green' }}>(New Record)</span></div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <div>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"human\" />\n                    <span>Human</span>\n                  </span>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"robot\" />\n                    <span>Robot</span>\n                  </span>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"alien\" />\n                    <span>Alien</span>\n                  </span>\n                </div>\n                <p></p>\n                <input type=\"checkbox\" refkey=\"agreeToForm\" />\n                <span>Agree?</span>\n\n                <p></p>\n                <button>Submit</button>\n                <div style={{ color: 'red' }}>{newRecordResult}</div>\n              </FirebaseForm>\n            </div>\n          </li>\n          <li>\n            <div>\n              <FirebaseForm callback={updateRecordCallback} style={{ border: '1px solid black', padding: '15px' }} dbRef={dbRef}>\n                <div>Example Form <span style={{ color: 'black' }}>(Edit Record)</span></div>\n                <p></p>\n                <div>Name</div>\n                <input onChange={(e) => setName(e.target.value)} value={name} refkey=\"name\" />\n                <div style={{ margin: '10px 0' }}></div>\n                <div>Email</div>\n                <input onChange={(e) => setEmail(e.target.value)} value={email} refkey=\"email\" type=\"email\" />\n                <p></p>\n                <div>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"human\" />\n                    <span>Human</span>\n                  </span>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"robot\" />\n                    <span>Robot</span>\n                  </span>\n                  <span>\n                    <input refkey=\"race\" name=\"race\" type=\"radio\" value=\"alien\" />\n                    <span>Alien</span>\n                  </span>\n                </div>\n                <p></p>\n                <input type=\"checkbox\" refkey=\"agreeToForm\" />\n                <span>Agree?</span>\n                <p></p>\n                <button>Submit</button>\n                <div style={{ color: 'red' }}>{updateRecordResult}</div>\n              </FirebaseForm>\n            </div>\n          </li>\n        </ul>\n      </div>\n      {/* <hr /> */}\n      {/* <h1>Test Area</h1>\n      <FirebaseForm dbRef={dbRef}>\n        <div>Uncontrolled input (state not controlled by react)</div>\n        <input refkey=\"testing\"/>\n        <div>\n          <div>Nested input</div>\n          <input refkey=\"testing2\"/>\n        </div>\n        <div></div>\n        <button>Submit</button>\n      </FirebaseForm> */}\n      <div style={{ height: \"100px\" }}>\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}